<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BruceGu&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://brucegu.github.io/"/>
  <updated>2018-11-27T12:35:40.200Z</updated>
  <id>http://brucegu.github.io/</id>
  
  <author>
    <name>Bruce Gu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>single precision floating point format</title>
    <link href="http://brucegu.github.io/2018/11/26/single-floating-format/"/>
    <id>http://brucegu.github.io/2018/11/26/single-floating-format/</id>
    <published>2018-11-26T12:06:10.000Z</published>
    <updated>2018-11-27T12:35:40.200Z</updated>
    
    <content type="html"><![CDATA[<p>本文内容来自<a href="https://en.wikipedia.org/wiki/Single-precision_floating-point_format" target="_blank" rel="noopener">wiki</a> <br><br>单精度浮点数在IEEE 754-2008标准中， 32位二进制格式被称为binary32，在IEEE 754-1985被称为single。IEEE 754还制定了其他的浮点数，比如64位二进制格式的双精度浮点数，以及最近基于十进制的表示。<br><a id="more"></a></p><h1 id="单精度浮点型格式"><a href="#单精度浮点型格式" class="headerlink" title="单精度浮点型格式"></a>单精度浮点型格式</h1><p>单精度浮点型是由32bits组成的：</p><ul><li>1bit表示符号</li><li>8bits表示指数</li><li>24bits表示有效精度（实际存储只用了23bits）<br>这决定了他有6-9个有效数字（十进制）的精度。如果一个最多只有6个有效数字的十进制数可以被转换为IEEE 754单精度浮点数，那么转换回数字字符串时，最终结果必须和原来的十进制数一样。如果一个单精度浮点数可以转换为至少9位有效数字的十进制数，那么转回单精度浮点数时，必须和原始单精度数一样。<br>计算公式：<br>(-1)<sup>sign</sup> <em> 2<sup>e-127</sup> </em> (1 + ∑( b<sub>23-i</sub> * 2<sup>-i</sup>)) (1 &lt;= i &lt;=23)<br>sign 是符号位数值<br>e 是指数位数值<br>b<sub>23-i</sub> 是有效数字位数值</li></ul><p>这其中有不少公式计算，详细可以看wiki。</p><h1 id="与十进制之间转换"><a href="#与十进制之间转换" class="headerlink" title="与十进制之间转换"></a>与十进制之间转换</h1><p>(12.375)<sub>10</sub> <br><br>= (12)<sub>10</sub> + (0.375)<sub>10</sub> <br><br>= (1100)<sub>2</sub> + (.011)<sub>2</sub> <br><br>= (1100.011)<sub>2</sub> <br><br>= (1.100011)<sub>10</sub> * 2<sup>3</sup> <br><br>符号部分为0，指数部分为3+127= 1000 0010，有效数字部分为1000 1100 0000 0000 0000 000</p><p>这其中0.375是通过如下方式转换的：<br>0.375 <em> 2   = 0 + 0.750     =&gt; 0 <br><br>0.750 </em> 2   = 1 + 0.5       =&gt; 1 <br><br>0.5 * 2     = 1 + 0.0       =&gt; 1 <br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文内容来自&lt;a href=&quot;https://en.wikipedia.org/wiki/Single-precision_floating-point_format&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;wiki&lt;/a&gt; &lt;br&gt;&lt;br&gt;单精度浮点数在IEEE 754-2008标准中， 32位二进制格式被称为binary32，在IEEE 754-1985被称为single。IEEE 754还制定了其他的浮点数，比如64位二进制格式的双精度浮点数，以及最近基于十进制的表示。&lt;br&gt;
    
    </summary>
    
      <category term="C/C++" scheme="http://brucegu.github.io/categories/C-C/"/>
    
    
  </entry>
  
  <entry>
    <title>variadic function</title>
    <link href="http://brucegu.github.io/2018/11/19/variadic-function/"/>
    <id>http://brucegu.github.io/2018/11/19/variadic-function/</id>
    <published>2018-11-19T06:06:10.000Z</published>
    <updated>2018-11-20T00:01:33.065Z</updated>
    
    <content type="html"><![CDATA[<p>variadic function是可变参数的函数。<br><a id="more"></a></p><h1 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span> <span class="params">( <span class="keyword">int</span> count, ... )</span></span>;</span><br></pre></td></tr></table></figure><h1 id="使用可变参数"><a href="#使用可变参数" class="headerlink" title="使用可变参数"></a>使用可变参数</h1><p>c++中可以使用宏va_list, va_start, va_arg, va_end来使用可变参数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span> <span class="params">( <span class="keyword">int</span> count, ... )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    va_list ap;</span><br><span class="line">    va_start( ap, count );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"void test( int "</span> &lt;&lt; count &lt;&lt; <span class="string">", "</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"int "</span> &lt;&lt; va_arg( ap, <span class="keyword">int</span> ) &lt;&lt; <span class="string">", "</span>; <span class="comment">//第二个参数是可变参数的类型</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" )"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    va_end( ap );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;variadic function是可变参数的函数。&lt;br&gt;
    
    </summary>
    
      <category term="C/C++" scheme="http://brucegu.github.io/categories/C-C/"/>
    
    
  </entry>
  
  <entry>
    <title>strict weak ordering</title>
    <link href="http://brucegu.github.io/2018/11/19/strict-weak-ordering/"/>
    <id>http://brucegu.github.io/2018/11/19/strict-weak-ordering/</id>
    <published>2018-11-19T06:06:10.000Z</published>
    <updated>2018-11-19T12:39:54.958Z</updated>
    
    <content type="html"><![CDATA[<p>strict weak ordering是非常重要的概念，特别是在std::map中，以非内置类型（例如：struct）作为key的时候，如果不提供key_compare的实现，编译无法通过。<br><a id="more"></a></p><h1 id="std-map-key-compare"><a href="#std-map-key-compare" class="headerlink" title="std::map::key_compare"></a>std::map::key_compare</h1><p>key_compare是一个接受两个参数返回值为bool类型的函数，例如：comp(a, b)，如果想a在b前面，那么就要返回true。comp需要遵守strict weak ordering的函数定义。<br>map对象使用它去决定容器中元素的顺序和判断两个元素的key是否等价（如果!comp(a,b) &amp;&amp; !comp(b,a)，那么a=b）。map中没有两个元素的key是一样的。</p><h1 id="维基百科的定义"><a href="#维基百科的定义" class="headerlink" title="维基百科的定义"></a>维基百科的定义</h1><p>strict weak ordering是集合S上的二元关系R，这个集合是一个strict partial order（严格偏序关系）。它有以下特性：</p><ul><li>反自反性：对所有S中的x，xRx 为false；</li><li>非对称性：对所有S中的x，如果xRy，那么yRx为false；</li><li>传递性：对所有S中的x，y，z，如果xRy， yRz，那么 xRz；</li><li>不可比的传递性：对于所有S中的x，y，z，如果x和y不可比( !(xRy)&amp;&amp;!(yRx) )，并且y和z也不可以比，那么x和z也不可比。</li></ul><h1 id="std-map中，strict-weak-ordering具体实现"><a href="#std-map中，strict-weak-ordering具体实现" class="headerlink" title="std::map中，strict weak ordering具体实现"></a>std::map中，strict weak ordering具体实现</h1><p>map::key_compare默认使用less<t>，它的实现为a &lt; b；也就是说map中默认使用“小于号”来实现，我们只需要重载自定义对象的“小于号”操作符即可，或者提供一个key_compare对象。下面是一个key_compare对象的例子：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">comp</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">( <span class="keyword">const</span> T&amp; lS, <span class="keyword">const</span> T&amp; rS )</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lS.age &gt; tS.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">map</span>&lt;T, <span class="keyword">int</span>, comp&gt; mapInstance;</span><br></pre></td></tr></table></figure></t></p><p>对于一般的数值比较满足strict weak ordering的有“小于号”和“大于号”，默认less<t>使用“小于号”，而上面的例子就使用“大于号”来实现的。</t></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;strict weak ordering是非常重要的概念，特别是在std::map中，以非内置类型（例如：struct）作为key的时候，如果不提供key_compare的实现，编译无法通过。&lt;br&gt;
    
    </summary>
    
      <category term="C/C++" scheme="http://brucegu.github.io/categories/C-C/"/>
    
    
      <category term="algorithm" scheme="http://brucegu.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>.NET Introduce</title>
    <link href="http://brucegu.github.io/2017/09/27/dotnet-introduce/"/>
    <id>http://brucegu.github.io/2017/09/27/dotnet-introduce/</id>
    <published>2017-09-27T00:00:00.000Z</published>
    <updated>2018-11-07T12:17:40.268Z</updated>
    
    <content type="html"><![CDATA[<p>.NET Framework, .NET Core 和 .NET Standard 一直没搞清楚，正好今天查询一番搞清楚了。<br><a id="more"></a></p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><a href="https://docs.microsoft.com/en-us/dotnet/standard/net-standard" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/dotnet/standard/net-standard</a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>.NET Standard 是一份标准，它不是一个具体实现。.NET Framework是.NET Standard的实现。.NET Core也是.NET Standard的实现。.NET Standard的实现还有不少，参考上面的<a href="https://docs.microsoft.com/en-us/dotnet/standard/net-standard" target="_blank" rel="noopener">链接</a>。<br>举个例子：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">StandardAPI</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Ping</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Pong</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">NetCoreAPI</span> : <span class="title">StardardAPI</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Shoot</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">NetFrameworkAPI</span>: <span class="title">StardardAPI</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Fire</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在创建应用程序或者类库的时候，考虑一下他的应用环境，选择不同的.NET Stardard实现即可。<br>今天infoq上正好有一篇介绍.net core 和 .net standard的文章：<br><a href="http://www.infoq.com/cn/news/2017/10/dotnet-core-standard-difference" target="_blank" rel="noopener">http://www.infoq.com/cn/news/2017/10/dotnet-core-standard-difference</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;.NET Framework, .NET Core 和 .NET Standard 一直没搞清楚，正好今天查询一番搞清楚了。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>常用数列概念</title>
    <link href="http://brucegu.github.io/2017/09/25/data-series/"/>
    <id>http://brucegu.github.io/2017/09/25/data-series/</id>
    <published>2017-09-25T08:44:48.000Z</published>
    <updated>2018-11-07T12:17:40.268Z</updated>
    
    <content type="html"><![CDATA[<p>编程中经常会用到的一些数学知识和公式。</p><a id="more"></a><h2 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h2><p>斐波那契数列，又称黄金分割数列，因数学家Leonardoda Fibonacci以兔子繁殖为例而引入，故又称兔子数列。在数学上，斐波那契数列被以如下递归的方法定义：F(0) = 0, F(1) = 1, F(n) = F(n-1) + F(n-2) (n&gt;=2, n∈N*)，这个数列从第三项开始，每一项是前两项的和。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1, 1, 2, 3, 5, 8 ...</span><br></pre></td></tr></table></figure></p><h2 id="等比数列求和"><a href="#等比数列求和" class="headerlink" title="等比数列求和"></a>等比数列求和</h2><p>一个数列，如果任意一项与前一项的比值是一个常数，用q来代表这个常数，且任一项不为0，即A(n)/A(n-1)=q（n为自然数），这个数列叫等比数列，其中常数q叫公比。</p><h3 id="通项公式："><a href="#通项公式：" class="headerlink" title="通项公式："></a>通项公式：</h3><p>a<sub>n</sub> = a<sub>1</sub> * q<sup>(n-1)</sup>;</p><h3 id="求和公式："><a href="#求和公式：" class="headerlink" title="求和公式："></a>求和公式：</h3><p>S<sub>n</sub> = a<sub>1</sub> <em> n (q=1)<br>S<sub>n</sub> = a<sub>1</sub> </em> (q<sup>n</sup>-1)/(q-1) (q != 1)</p><h3 id="求和推导："><a href="#求和推导：" class="headerlink" title="求和推导："></a>求和推导：</h3><p>（1）S<sub>n</sub>=a<sub>1</sub>+a<sub>2</sub>+a<sub>3</sub>+…+a<sub>n</sub> (公比为q)<br>（2）qS<sub>n</sub>=a<sub>1</sub>q + a<sub>2</sub>q + a<sub>3</sub>q +…+ a<sub>n</sub>q = a<sub>2</sub>+ a<sub>3</sub>+ a<sub>4</sub>+…+ a<sub>n</sub>+ a<sub>(n+1)</sub><br>（3）S<sub>n</sub>-qS<sub>n</sub>=(1-q)S<sub>n</sub>=a<sub>1</sub>-a<sub>(n+1)</sub><br>（4）a<sub>(n+1)</sub>=a<sub>1</sub>q<sup>n</sup><br>（5）S<sub>n</sub>=a<sub>1</sub>(1-q<sup>n</sup>)/(1-q)（q≠1)</p><h2 id="等差数列求和"><a href="#等差数列求和" class="headerlink" title="等差数列求和"></a>等差数列求和</h2><p>一个数列，从第二项开始，每一项与前一项的差等于同一个常数，那么这个数列叫等差数列。</p><h3 id="通项公式：-1"><a href="#通项公式：-1" class="headerlink" title="通项公式："></a>通项公式：</h3><p>a<sub>n</sub> = a<sub>1</sub> + (n-1)d;</p><h3 id="求和公式：-1"><a href="#求和公式：-1" class="headerlink" title="求和公式："></a>求和公式：</h3><p>S<sub>n</sub> = (a<sub>1</sub> + a<sub>n</sub>) * n / 2;</p><h3 id="推导过程："><a href="#推导过程：" class="headerlink" title="推导过程："></a>推导过程：</h3><p>S<sub>n</sub> = a<sub>1</sub> + … + a<sub>n</sub><br>S<sub>n</sub> = n <em> a<sub>1</sub> + ( 0 + 1 + 2 … + (n-1) ) </em> d<br>S<sub>n</sub> = n <em> a<sub>1</sub> + n </em> (n-1) <em> d / 2<br>S<sub>n</sub> = (n </em> a<sub>1</sub> + n <em> a<sub>1</sub> + n </em> (n-1) <em> d) /2<br>S<sub>n</sub> = n </em> (a<sub>1</sub> + a<sub>n</sub>) / 2</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;编程中经常会用到的一些数学知识和公式。&lt;/p&gt;
    
    </summary>
    
      <category term="math" scheme="http://brucegu.github.io/categories/math/"/>
    
    
      <category term="sequence" scheme="http://brucegu.github.io/tags/sequence/"/>
    
  </entry>
  
  <entry>
    <title>冒泡排序</title>
    <link href="http://brucegu.github.io/2017/09/25/bubble-sort/"/>
    <id>http://brucegu.github.io/2017/09/25/bubble-sort/</id>
    <published>2017-09-25T06:17:49.000Z</published>
    <updated>2018-11-07T12:17:40.268Z</updated>
    
    <content type="html"><![CDATA[<p>冒泡排序是交换排序的一种，是排序算法中最简单，效率最差的一种。<br><a id="more"></a></p><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><p>冒泡排序是交换排序的一种，从数组(其长度为j)的起始位置开始，相邻的i，i+1的值进行进行比较，如果i的值大于i+1值，那么将他们进行交换，如此循环至数组结束，那么数值最大的值将位于数组末尾(j-1)。从数组起始再次比较，直至数组j-2处，如此循环直至数组起始位置。</p><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><p>算法实现可以从<a href="https://github.com/brucegu/practices/tree/master/algorithm/sort" target="_blank" rel="noopener">practices</a>中找到。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_demo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> data[] = &#123; <span class="number">10</span>, <span class="number">20</span>, <span class="number">11</span>, <span class="number">30</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">29</span> &#125;;</span><br><span class="line">    bubble( data, lengthof(data, <span class="keyword">int</span>) );</span><br><span class="line">    print_int_array( data, lengthof(data, <span class="keyword">int</span>) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble</span><span class="params">( <span class="keyword">int</span> *data, <span class="keyword">int</span> length )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length<span class="number">-1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length-i<span class="number">-1</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (data[j] &gt; data[j+<span class="number">1</span>]) swap( data, j, j+<span class="number">1</span> );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">( <span class="keyword">int</span> *data, <span class="keyword">int</span> i, <span class="keyword">int</span> j )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = data[i];</span><br><span class="line">    data[i] = data[j];</span><br><span class="line">    data[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_int_array</span><span class="params">( <span class="keyword">int</span> *data, <span class="keyword">int</span> length )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>( <span class="string">"data:\n"</span> );</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">" %d"</span>, data[i] );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="算法改进"><a href="#算法改进" class="headerlink" title="算法改进"></a>算法改进</h2><ul><li><p>如果从某一项开始，不再与其他项进行交换，在此之后的数据项就是已经排过序的，那么从该项之后的比较就不再需要了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_stop_when_noexchange</span><span class="params">( <span class="keyword">int</span> *data, <span class="keyword">int</span> length )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (data[j] &gt; data[j+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                pos = j;</span><br><span class="line">                swap( data, j, j+<span class="number">1</span> );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        i = pos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>每次循环的时候，如果找出最大值和最小值，将会大大的提升性能。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_low_high</span><span class="params">( <span class="keyword">int</span> *data, <span class="keyword">int</span> length )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> high = length<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt; high)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = low; j &lt; high; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (data[j] &gt; data[j+<span class="number">1</span>]) swap( data, j, j+<span class="number">1</span> );</span><br><span class="line">        &#125;</span><br><span class="line">        high--;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = high; k &gt; <span class="number">0</span>; k--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (data[k] &lt; data[k<span class="number">-1</span>]) swap( data, k, k<span class="number">-1</span> );</span><br><span class="line">        &#125;</span><br><span class="line">        low++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;冒泡排序是交换排序的一种，是排序算法中最简单，效率最差的一种。&lt;br&gt;
    
    </summary>
    
      <category term="algorithm" scheme="http://brucegu.github.io/categories/algorithm/"/>
    
    
      <category term="bubble" scheme="http://brucegu.github.io/tags/bubble/"/>
    
  </entry>
  
  <entry>
    <title>MAKEFILE知识</title>
    <link href="http://brucegu.github.io/2017/09/23/makefile-knowledges/"/>
    <id>http://brucegu.github.io/2017/09/23/makefile-knowledges/</id>
    <published>2017-09-23T01:00:00.000Z</published>
    <updated>2018-11-07T12:17:40.269Z</updated>
    
    <content type="html"><![CDATA[<p>makefile 基础知识<br><a id="more"></a></p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p><a href="http://wiki.ubuntu.com.cn/%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E5%86%99Makefile:MakeFile%E4%BB%8B%E7%BB%8D" target="_blank" rel="noopener">http://wiki.ubuntu.com.cn/%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E5%86%99Makefile:MakeFile%E4%BB%8B%E7%BB%8D</a></p><h1 id="gmake-与-make"><a href="#gmake-与-make" class="headerlink" title="gmake 与 make"></a>gmake 与 make</h1><p>gmake 是GNU make的缩写，在大多数的linux系统中，make就是GNU Make，对于一些unix的系统，make指向系统自带的make，例如：BSD make.</p><h1 id="makefile介绍"><a href="#makefile介绍" class="headerlink" title="makefile介绍"></a>makefile介绍</h1><p>make命令执行时，需要一个makefile文件来告诉他如何编译和链接程序。</p><h1 id="makefile规则"><a href="#makefile规则" class="headerlink" title="makefile规则"></a>makefile规则</h1><p>makefile的编写规则如下：<br>target … : prerequisites …<br>    command<br>    …<br>    …<br>target可以是一个目标文件(object file)，也可以是一个可执行文件，还可以是一个标签（label，也就是伪目标）。<br>prerequisties是生成target所需要的文件。<br>command是make需要执行的命令（任意的shell命令），command之前必须有个TAB建。<br>这是一个依赖关系的描述，生成target文件依赖于prerequisties的这些文件，如果依赖文件中的任何文件都比target要新，那么就会运行command重新生成target。</p><h1 id="makefile示例"><a href="#makefile示例" class="headerlink" title="makefile示例"></a>makefile示例</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">shap : combinator.o circle.o rectangle.o</span><br><span class="line">gcc -o shap combinator.o circle.o rectangle.o</span><br><span class="line"></span><br><span class="line">combinator.o : combinator.c circle.h rectangle.h</span><br><span class="line">gcc -c combinator.c</span><br><span class="line">circle.o : circle.c circle.h</span><br><span class="line">gcc -c circle.c</span><br><span class="line">rectangle.o : rectangle.c rectangle.h</span><br><span class="line">gcc -c rectangle.c</span><br><span class="line"></span><br><span class="line">clean :</span><br><span class="line">del shap combinator.o circle.o rectangle.o</span><br></pre></td></tr></table></figure><h1 id="make中使用变量"><a href="#make中使用变量" class="headerlink" title="make中使用变量"></a>make中使用变量</h1><p>从上面的示例可以看到，很多重复的地方，可以使用变量来替代：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">objects = combinator.o circle.o rectangle.o</span><br><span class="line">shap : $(objects)</span><br><span class="line">gcc -o shap $(objects)</span><br><span class="line"></span><br><span class="line">combinator.o : combinator.c circle.h rectangle.h</span><br><span class="line">gcc -c combinator.c</span><br><span class="line">circle.o : circle.c circle.h</span><br><span class="line">gcc -c circle.c</span><br><span class="line">rectangle.o : rectangle.c rectangle.h</span><br><span class="line">gcc -c rectangle.c</span><br><span class="line"></span><br><span class="line">clean :</span><br><span class="line">del shap $(objects)</span><br></pre></td></tr></table></figure></p><h1 id="make中的隐晦规则和伪目标"><a href="#make中的隐晦规则和伪目标" class="headerlink" title="make中的隐晦规则和伪目标"></a>make中的隐晦规则和伪目标</h1><p>GNU的make相当强大，他可以自动推导出文件以及文件依赖关系后面的命令，对于每一个[.o]文件，他会自动把[.c]文件加到依赖关系中，甚至后面都有 gcc -c [.c]这样的命令，make一会自动推导(nmake中，只能推导依赖关系，好像没法推导命令)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">objects = combinator.o circle.o rectangle.o</span><br><span class="line">shap : $(objects)</span><br><span class="line">gcc -o shap.exe $(objects)</span><br><span class="line"></span><br><span class="line">combinator.o : circle.h rectangle.h</span><br><span class="line">circle.o : circle.h</span><br><span class="line">rectangle.o : rectangle.h</span><br><span class="line"></span><br><span class="line">clean :</span><br><span class="line">-del shap.exe $(objects)</span><br></pre></td></tr></table></figure></p><p>这里的.PHONY表示clean是一个伪目标。这里在del前加-，意味着也许某些文件会出问题，但不要管，继续做后面的事情</p><h1 id="makefile内容"><a href="#makefile内容" class="headerlink" title="makefile内容"></a>makefile内容</h1><p>makefile文件中有五个东西：显示规则，隐示规则，变量定义，文件指示和注释<br>显示规则：显示书写出来，如何生成目标文件，依赖文件和生成文件的命令<br>隐示规则：是由make命令推导出来，这样方便写出简洁的makefile<br>变量定义：可以定义一些变量，一般都是字符串变量，当make命令执行的时候，会把变量的值替换到使用的地方<br>文件指示：</p><pre><code>* 在一个makefile中引用另一个makefile，使用include &lt;filename&gt;;* 根据某些情况制定makefile中的有效部分* 定义一个多行的命令</code></pre><p>注释：用#来写注释</p><h1 id="make的工作方式"><a href="#make的工作方式" class="headerlink" title="make的工作方式"></a>make的工作方式</h1><ul><li>make命令会寻找当前目录下名为：GNUmakefile, makefile, Makefile的文件</li><li>读入所有的makefile</li><li>读入被include的makefile</li><li>初始化文件中的变量</li><li>推导隐晦规则，并分析所有规则</li><li>为所有文件建立依赖关系</li><li>根据依赖关系，决定哪些目标重新生成</li><li>执行生成命令</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;makefile 基础知识&lt;br&gt;
    
    </summary>
    
      <category term="C/C++" scheme="http://brucegu.github.io/categories/C-C/"/>
    
    
      <category term="makefile" scheme="http://brucegu.github.io/tags/makefile/"/>
    
  </entry>
  
  <entry>
    <title>GDB知识</title>
    <link href="http://brucegu.github.io/2017/09/23/gdb-knowledges/"/>
    <id>http://brucegu.github.io/2017/09/23/gdb-knowledges/</id>
    <published>2017-09-23T00:15:02.000Z</published>
    <updated>2018-11-07T12:17:40.269Z</updated>
    
    <content type="html"><![CDATA[<p>gdb的基础知识<br><a id="more"></a></p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p><a href="http://www.cnblogs.com/zzx1045917067/archive/2012/12/26/2834310.html" target="_blank" rel="noopener">http://www.cnblogs.com/zzx1045917067/archive/2012/12/26/2834310.html</a></p><h1 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h1><p>在使用gdb命令之前，编译程序shap.exe时需要加入-g选项</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>gdb shap.exe</td><td>启动命令</td></tr><tr><td>help list</td><td>查看list命令</td></tr><tr><td>list(l) 5， l circle.c 5，l show_circle</td><td>查看当前文件或指定文件第五行前后的代码</td></tr><tr><td>break(b) 5，b combinator.c:8</td><td>在当前文件或指定文件位置设置断点</td></tr><tr><td>tbreak n/func</td><td>设置临时断点，到达后自动删除</td></tr><tr><td>break combinator.c:5</td><td>在combinator.c文件的第五行设置断点</td></tr><tr><td>break 0x606060</td><td>用于在内存某一地址设置断点</td></tr><tr><td>break 10 if i==3</td><td>设置条件断点</td></tr><tr><td>info breakpoints/watchpoints [n]</td><td>n表示断点编号，查看断点和观察点的情况</td></tr><tr><td>clear 10</td><td>清除对应行的断点</td></tr><tr><td>delete 3</td><td>清楚指定编号的断点</td></tr><tr><td>disable/enable + 断点编号,编号2</td><td>使对应编号的断点失效或生效</td></tr><tr><td>awatch/watch i</td><td>设置观察点，当变量被读出或写入时程序被暂停</td></tr><tr><td>rwatch i</td><td>设置一个观察点，当变量被读出时，程序被暂停</td></tr><tr><td>catch</td><td>设置捕捉点捕捉程序运行时的一些事件。如：载入共享库或是C++的异常</td></tr><tr><td>tcatch</td><td>捕捉后自动删除该捕捉点</td></tr><tr><td>info b</td><td>查看断点</td></tr><tr><td>run(r)</td><td>启动shap.exe</td></tr><tr><td>print(p) i</td><td>查看变量</td></tr><tr><td>diplay exp</td><td>显示表示的值，每当程序运行到断点处，就会显示表达式的值</td></tr><tr><td>info display</td><td>显示当前要显示的表达式的情况</td></tr><tr><td>delete display No.</td><td>删除要显示的表达式</td></tr><tr><td>disable/enable display No.</td><td>使需要显示的表达式失效/生效</td></tr><tr><td>undisplay display No.</td><td>用于结束表达式值的显示</td></tr><tr><td>watch i</td><td>观察变量</td></tr><tr><td>next(n)</td><td>非进入式单步运行</td></tr><tr><td>continue(c)</td><td>继续运行</td></tr><tr><td>quit(q)</td><td>退出gdb</td></tr><tr><td>step(s)</td><td>进入式（会进入当前调用的子函数中）单步执行，但此函数编译时必须有debug信息</td></tr><tr><td>finish</td><td>一直运行到函数返回，并打印函数返回时的堆栈地址和返回值及参数值等信息</td></tr><tr><td>until 3</td><td>运行到函数某一行</td></tr><tr><td>return 5</td><td>改变程序流程，直接结束当前函数，并将指定值返回</td></tr><tr><td>call func</td><td>在当前位置执行指定的函数</td></tr><tr><td>set args arg1 arg2</td><td>设置运行参数</td></tr><tr><td>show args</td><td>显示运行参数</td></tr><tr><td>set width 70</td><td>设置gdb的行宽</td></tr><tr><td>cd ../</td><td>切换工作目录</td></tr></tbody></table><p>断点/观察点关系:</p><ul><li>所有使用断点的操作都适合观察点</li><li>断点是CPU到达某一地址取指令时中断，观察点是CPU到某一地址读写数据时中断</li><li>观察点在多线程中左右非常有限，gdb只能观察一个线程中的表达式的值，无法检测非当前线程对表达式的改变</li></ul><h1 id="堆栈相关命令"><a href="#堆栈相关命令" class="headerlink" title="堆栈相关命令"></a>堆栈相关命令</h1><h1 id="跳转执行"><a href="#跳转执行" class="headerlink" title="跳转执行"></a>跳转执行</h1><h1 id="signal命令"><a href="#signal命令" class="headerlink" title="signal命令"></a>signal命令</h1><h1 id="调试已运行的程序"><a href="#调试已运行的程序" class="headerlink" title="调试已运行的程序"></a>调试已运行的程序</h1><ul><li>通过-pid参数来绑定制定的进程程序，sudo gdb -pid 3095</li><li>通过进程和进程号来绑定，sudo gdb shap.exe 3095</li><li>通过attach来附加进程，并通过detach来取消</li></ul><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><p>如果程序是多线程的，可以定义断点是否在所有线程上，还是指定的线程上。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">break frik.c:13 thread 28 if bartab &gt; lim</span><br></pre></td></tr></table></figure></p><p>可以通过”info threads”来查看程序中运行的线程信息。<br>当程序被gdb挺住时，所有的运行线程都会被停住，这方便查看运行程序的总体情况，恢复程序时，所有线程也会恢复运行。</p><h1 id="调式core文件"><a href="#调式core文件" class="headerlink" title="调式core文件"></a>调式core文件</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;gdb的基础知识&lt;br&gt;
    
    </summary>
    
      <category term="C/C++" scheme="http://brucegu.github.io/categories/C-C/"/>
    
    
      <category term="gdb" scheme="http://brucegu.github.io/tags/gdb/"/>
    
  </entry>
  
  <entry>
    <title>C/C++ 基础知识</title>
    <link href="http://brucegu.github.io/2017/09/23/basick-knowledges/"/>
    <id>http://brucegu.github.io/2017/09/23/basick-knowledges/</id>
    <published>2017-09-23T00:12:02.000Z</published>
    <updated>2018-11-07T12:17:40.268Z</updated>
    
    <content type="html"><![CDATA[<p>什么是GCC, gcc, g++，他们之间的关系是什么，gcc和g++的区别是什么<br><a id="more"></a></p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>以下内容非原创，皆来源于网络。</p><h1 id="GCC，gcc-与-g"><a href="#GCC，gcc-与-g" class="headerlink" title="GCC，gcc 与 g++"></a>GCC，gcc 与 g++</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>GCC：GNU Complier Collection，它可以编译C，C++等语言</li><li>gcc：GCC中的GNU C Complier</li><li>g++：GCC中的GNU C++ Complier</li></ul><p>本质而言，gcc和g++并不是编译器，也不是编译器的集合，他们只是一种驱动器，根据要编译的文件类型，调用对应的GNU的编译器而已，比如，用gcc<br>编译一个文件，会有以下几个步骤：</p><ol><li>Call a preprocessor, like cpp</li><li>Call an actual compiler, like cc or cc1</li><li>Call an assembler, like as</li><li>Call a linker, like ld</li></ol><p>由于编译器是可以更换的，所以gcc不仅仅可以编译C文件，所以，更准确的说法是：gcc调用complier，而g++调用C++ compiler。</p><h2 id="gcc-与-g-区别："><a href="#gcc-与-g-区别：" class="headerlink" title="gcc 与 g++区别："></a>gcc 与 g++区别：</h2><ul><li>对于<em>.c和</em>.cpp文件，gcc分别当作c和cpp文件编译</li><li>对于<em>.c和</em>.cpp文件，g++都当作cpp文件编译</li><li>使用g++编译文件时，g++会自动链接标准库STL，而gcc不会</li><li>gcc在编译c文件的时候，可以使用的预定义宏是比较少的</li><li>gcc在编译cpp文件时/g++在编译c和cpp文件时，会加入一些额外的宏：这些宏如下：<ul><li>#define <strong>GXX_WEAK</strong> 1</li><li>#define __cplusplus 1</li><li>#define __DEPRECATED 1</li><li>#define <strong>GNUG</strong> 4</li><li>#define __EXCEPTIONS 1</li><li>#define <strong>private_extern</strong> extern</li></ul></li></ul><p>在使用gcc编译cpp文件时，为了能够使用STL，需要加参数 -lstdc++，这并不代表gcc -lstdc++与g++等价，他们的区别不仅仅是这个。</p><h2 id="常用命令参数"><a href="#常用命令参数" class="headerlink" title="常用命令参数"></a>常用命令参数</h2><ul><li>-g turn on debugging (so GDB gives more friendly output)</li><li>-Wall turn on most warning</li><li>-O和-O2 turn on optimizations</li><li>-o name of the output file</li><li>-c output an object file</li><li>-I specify an included directory</li><li>-L specify a lib directory</li><li>-l link with a library</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;什么是GCC, gcc, g++，他们之间的关系是什么，gcc和g++的区别是什么&lt;br&gt;
    
    </summary>
    
      <category term="C/C++" scheme="http://brucegu.github.io/categories/C-C/"/>
    
    
      <category term="GCC" scheme="http://brucegu.github.io/tags/GCC/"/>
    
  </entry>
  
</feed>
